{"version":3,"sources":["serviceWorker.js"],"names":["cacheName","self","addEventListener","event","waitUntil","caches","open","then","cache","addAll","respondWith","match","request","response","updateCache","clone","registration","showNotification","fetch","put"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,OAAlB;AACAC,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAiCC,KAAK,IAAI;AACxCA,EAAAA,KAAK,CAACC,SAAN,CACEC,MAAM,CAACC,IAAP,CAAYN,SAAZ,EAAuBO,IAAvB,CAA4BC,KAAK,IAAI;AACnCA,IAAAA,KAAK,CAACC,MAAN,CAAa,CACX,sBADW,EAEX,WAFW,EAGX,oBAHW,EAIX,oBAJW,EAKX,6BALW,EAMX,oFANW,CAAb;AAQD,GATD,CADF;AAYD,CAbD,GAeA;;AACAR,IAAI,CAACC,gBAAL,CAAsB,OAAtB,EAA+BC,KAAK,IAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAAA,KAAK,CAACO,WAAN,CACEL,MAAM,CAACC,IAAP,CAAYN,SAAZ,EAAuBO,IAAvB,CAA4BC,KAAK,IAC/BA,KAAK,CAACG,KAAN,CAAYR,KAAK,CAACS,OAAlB,EAA2BL,IAA3B,CAAgCM,QAAQ,IAAI;AAC1C,QAAIA,QAAJ,EAAc;AACZ,aAAOA,QAAP;AACD;AACF,GAJD,CADF,CADF;AASAV,EAAAA,KAAK,CAACC,SAAN,CAAgBU,WAAW,CAACX,KAAK,CAACS,OAAN,CAAcG,KAAd,EAAD,CAA3B;AACD,CA9BD,GAgCA;;AACAd,IAAI,CAACC,gBAAL,CAAsB,MAAtB,EAA8BC,KAAK,IAAI;AACrCA,EAAAA,KAAK,CAACC,SAAN,CACEH,IAAI,CAACe,YAAL,CAAkBC,gBAAlB,CACE,4CADF,CADF;AAKD,CAND,GAQA;AACA;;AAEA,MAAMH,WAAW,GAAGF,OAAO,IAAI;AAC7B,SAAOP,MAAM,CAACC,IAAP,CAAYN,SAAZ,EAAuBO,IAAvB,CAA4BC,KAAK,IAAI;AAC1C,WAAOU,KAAK,CAACN,OAAD,CAAL,CAAeL,IAAf,CAAoBM,QAAQ,IAAI;AACrC,aAAOL,KAAK,CAACW,GAAN,CAAUP,OAAV,EAAmBC,QAAQ,CAACE,KAAT,EAAnB,EAAqCR,IAArC,CAA0C,MAAM;AACrD,eAAOM,QAAP;AACD,OAFM,CAAP,CADqC,CAIrC;AACD,KALM,CAAP;AAMD,GAPM,CAAP;AAQD,CATD","file":"serviceWorker.js","sourceRoot":"../src","sourcesContent":["// cache files and requests\nconst cacheName = \"files\";\nself.addEventListener(\"install\", event => {\n  event.waitUntil(\n    caches.open(cacheName).then(cache => {\n      cache.addAll([\n        \"/assets/logo_200.png\",\n        \"/index.js\",\n        \"/favicon-16x16.png\",\n        \"/favicon-32x32.png\",\n        \"/android-chrome-192x192.png\",\n        \"https://fonts.googleapis.com/css?family=Comfortaa:300,400,500,600,700&display=swap\"\n      ]);\n    })\n  );\n});\n\n// return requests with cached resources\nself.addEventListener(\"fetch\", event => {\n  // event.respondWith(\n  //   caches.match(event.request).then(response => {\n  //     if (response) {\n  //       return response;\n  //     }\n  //     const requestToCache = event.request.clone();\n  //     return fetch(requestToCache).then(response => {\n  //       if (!response || response.status !== 200) {\n  //         return response;\n  //       }\n\n  //       const responseToCache = response.clone();\n  //       caches.open(cacheName).then(cache => {\n  //         cache.put(requestToCache, responseToCache);\n  //       });\n  //       return response;\n  //     });\n  //   })\n  // );\n  event.respondWith(\n    caches.open(cacheName).then(cache =>\n      cache.match(event.request).then(response => {\n        if (response) {\n          return response;\n        }\n      })\n    )\n  );\n  event.waitUntil(updateCache(event.request.clone()));\n});\n\n// Add an event listener for push API events\nself.addEventListener(\"push\", event => {\n  event.waitUntil(\n    self.registration.showNotification(\n      \"Push notifications changing your business!\"\n    )\n  );\n});\n\n// After using cached resource to respond to a request\n// update the cached resource\n\nconst updateCache = request => {\n  return caches.open(cacheName).then(cache => {\n    return fetch(request).then(response => {\n      return cache.put(request, response.clone()).then(() => {\n        return response;\n      });\n      // check if we have a cached version of the request to notify the user of updates\n    });\n  });\n};\n"]}