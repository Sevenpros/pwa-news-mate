{"version":3,"sources":["serviceWorker.js"],"names":["cacheName","self","addEventListener","event","waitUntil","caches","open","then","cache","addAll","respondWith","match","request","response","updateCache","clone","registration","showNotification","fetch","put"],"mappings":";AACA,MAAMA,EAAY,QAClBC,KAAKC,iBAAiB,UAAWC,IAC/BA,EAAMC,UACJC,OAAOC,KAHO,SAGSC,KAAKC,IAC1BA,EAAMC,OAAO,CACX,uBACA,YACA,qBACA,qBACA,8BACA,4FAORR,KAAKC,iBAAiB,QAASC,IAoB7BA,EAAMO,YACJL,OAAOC,KAtCO,SAsCSC,KAAKC,GAC1BA,EAAMG,MAAMR,EAAMS,SAASL,KAAKM,IAC1BA,GAAAA,EACKA,OAAAA,MAKfV,EAAMC,UAAUU,EAAYX,EAAMS,QAAQG,YAI5Cd,KAAKC,iBAAiB,OAAQC,IAC5BA,EAAMC,UACJH,KAAKe,aAAaC,iBAChB,iDAQN,MAAMH,EAAcF,GACXP,OAAOC,KA9DE,SA8DcC,KAAKC,GAC1BU,MAAMN,GAASL,KAAKM,GAClBL,EAAMW,IAAIP,EAASC,EAASE,SAASR,KAAK,IACxCM","file":"serviceWorker.js","sourceRoot":"../src","sourcesContent":["// cache files and requests\nconst cacheName = \"files\";\nself.addEventListener(\"install\", event => {\n  event.waitUntil(\n    caches.open(cacheName).then(cache => {\n      cache.addAll([\n        \"/assets/logo_200.png\",\n        \"/index.js\",\n        \"/favicon-16x16.png\",\n        \"/favicon-32x32.png\",\n        \"/android-chrome-192x192.png\",\n        \"https://fonts.googleapis.com/css?family=Comfortaa:300,400,500,600,700&display=swap\"\n      ]);\n    })\n  );\n});\n\n// return requests with cached resources\nself.addEventListener(\"fetch\", event => {\n  // event.respondWith(\n  //   caches.match(event.request).then(response => {\n  //     if (response) {\n  //       return response;\n  //     }\n  //     const requestToCache = event.request.clone();\n  //     return fetch(requestToCache).then(response => {\n  //       if (!response || response.status !== 200) {\n  //         return response;\n  //       }\n\n  //       const responseToCache = response.clone();\n  //       caches.open(cacheName).then(cache => {\n  //         cache.put(requestToCache, responseToCache);\n  //       });\n  //       return response;\n  //     });\n  //   })\n  // );\n  event.respondWith(\n    caches.open(cacheName).then(cache =>\n      cache.match(event.request).then(response => {\n        if (response) {\n          return response;\n        }\n      })\n    )\n  );\n  event.waitUntil(updateCache(event.request.clone()));\n});\n\n// Add an event listener for push API events\nself.addEventListener(\"push\", event => {\n  event.waitUntil(\n    self.registration.showNotification(\n      \"Push notifications changing your business!\"\n    )\n  );\n});\n\n// After using cached resource to respond to a request\n// update the cached resource\n\nconst updateCache = request => {\n  return caches.open(cacheName).then(cache => {\n    return fetch(request).then(response => {\n      return cache.put(request, response.clone()).then(() => {\n        return response;\n      });\n      // check if we have a cached version of the request to notify the user of updates\n    });\n  });\n};\n"]}